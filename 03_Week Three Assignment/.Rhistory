which(x %in%  name[str_detect(name, ",")])
which(name %in%  name[str_detect(name, ",")])
name[which(name %in%  name[str_detect(name, ",")])]
str_detect(name, ",")
if (str_detect(name, ",") ==TRUE)
{
print(name)
}
if (str_detect(name, ",") == TRUE)
{
print(name)
}
str_detect(name, ",") == TRUE
str_detect(name, ",")
name[str_detect(name, ",")]
str_split(name[str_detect(name, ",")], ",",simplify = TRUE)
str_split(name[str_detect(name, ",")], ",")
name[str_detect(name, ",")]
which(name %in%  name[str_detect(name, ",")]
which(name %in%  name[str_detect(name, ",")
which(name %in%  name[str_detect(name, ","))
which(name %in%  name[str_detect(name, ",")])
name[str_detect(name, ",")]
str_split(name[str_detect(name, ",")], ", ")
str_split(name[str_detect(name, ",")], ", ", simplify=TRUE)
name[str_detect(name, ",")]
unlist(str_split(name[str_detect(name, ",")],", "))
fname_lname <- unlist(str_split(name[str_detect(name, ",")],", "))
for (val in name[str_detect(name, ",")]){
print (val)
}
for (val in str_detect(name, ",")){
print (val)
}
for (val in str_detect(name, ","))
{
if (val == TRUE){
print (val)
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE){
print (name[str_detect(name, ",")])
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE){
print (which(name %in%  name[str_detect(name, ",")]))
}
}
name[2]
name[2]
name[5]
which(name %in%  name[str_detect(name, ",")])
text <- "Burns, C. Montgomery"
text <- "Burns, C. Montgomery"
text
text <- "Burns, C. Montgomery"
str_split(text, ", ")
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
firstName <- fullname[2]
firstName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
firstName <- fullname[2][2]
firstName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
firstName <- fullname[1][2]
firstName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[2]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1,2]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1,1]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1:1]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1:0]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[1,2]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1]]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
fullname[[1]][2]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
firstName <-[[1]][1]
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
firstName <-fullname[[1]][1]
firstName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
LastName <-fullname[[1]][1]
LastName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
FirstName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(c(FirstName, " ",LastName))
newName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(c(FirstName, LastName))
newName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, LastName)
newName
text <- "Burns, C. Montgomery"
fullname <- str_split(text, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
newName
convert_names <- function(name){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}
for (val in str_detect(name, ","))
{
if (val == TRUE){
name[str_detect(name, ",")] <- convert_names(name[str_detect(name, ",")] )
}
}
convert_names("Burns, C. Montgomery")
for (val in str_detect(name, ","))
{
if (val == TRUE)
{
print(name[str_detect(name, ",")])
#<- convert_names(name[str_detect(name, ",")] )
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE)
{
print(name[str_detect(name, ",")])
#<- convert_names(name[str_detect(name, ",")] )
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE)
{
print(true)
#<- convert_names(name[str_detect(name, ",")] )
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE)
{
print("yes")
#<- convert_names(name[str_detect(name, ",")] )
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE)
{
print("yes")
}
}
for (val in str_detect(name, ","))
{
if (val == TRUE){
print("yes")
}
}
for (val in str_detect(name, ",")){
print(val)
}
print(name)
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
name[which(name %in%  name[str_detect(name, ",")])]
convert_names <- function(name){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}
for (val in str_detect(name, ",")){
print(val)
}
for (val in str_detect(name, ",")){
if (val==TRUE){
print(name[val])
}
}
lapply(convert_names, name)
name
sapply(convert_names, name)
convert_names <- function(name){
if(str_detect(name, ",")==TRUE){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}
}
lapply(convert_names, name)
mapply(convert_names, name)
name
name <- mapply(convert_names, name)
name
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
name[which(name %in%  name[str_detect(name, ",")])]
convert_names <- function(name){
if(str_detect(name, ",")==TRUE){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}else
return(name)
}
name <- mapply(convert_names, name)
name
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
name[which(name %in%  name[str_detect(name, ",")])]
convert_names <- function(name){
if(str_detect(name, ",")==TRUE){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}else
return(name)
}
name <- lapply(convert_names, name)
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
name[which(name %in%  name[str_detect(name, ",")])]
convert_names <- function(name){
if(str_detect(name, ",")==TRUE){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}else
return(name)
}
for (val in name){
print(val)
}
for (val in name){
print(name[val])
}
for (i in seq_along(name)){
print(name[i])
}
for (i in seq_along(name)){
name[i] <- convert_names(name[i])
}
name
str_detect(name, "Rev.|Dr.")
logical_name <- str_detect(name, "[Rev.| Dr.]")
logical_name <- str_detect(name, "[Rev.| Dr.]")
logical_name
logical_name <- str_detect(name, "Rev.| Dr.")
logical_name
name
title <- c("Rev.", "Dr.")
#logical_name <- str_detect(name, "Rev.| Dr.")
#logical_name
title <- c("Rev.", "Dr.")
#logical_name <- str_detect(name, "Rev.| Dr.")
#logical_name
title
title <- c("Rev.", "Dr.")
logical_name <- str_detect(name, title)
logical_name
title <- c("Rev.", "Dr.", "Mr.", "President", "Mayor")
logical_name <- str_detect(name, title)
logical_name
title <- c("Rev.", "Dr.", "Mr.")
logical_name <- str_detect(name, title)
logical_name
title <- c("Rev.", "Dr.")
logical_name <- str_detect(name, title)
logical_name
title <- c("Rev.", "Dr.", "Mr.")
logical_name <- str_detect(name, title)
logical_name
logical_name <- str_detect(name, "Dr."|"Rev.")
logical_name <- str_detect(name, "Dr.|Rev.")
logical_name
logical_name <- str_detect(name, "Dr.|Rev.|Mayor|Father|Reverend")
logical_name
test <- "C. Montgomery Burns"
str_replace(test pattern = "[[:alpha:]. ]", replacement = "")
test <- "C. Montgomery Burns"
pattern1 ="[[:alpha:]. ]"
str_replace(test pattern = pattern1, replacement = "")
test <- "C. Montgomery Burns"
str_replace(test, pattern = "([[:alpha:]. ])", replacement = "")
test
test <- "C. Montgomery Burns"
test<- str_replace(test, pattern = "([[:alpha:]. ])", replacement = "")
test
test <- "C. Montgomery Burns"
test<- str_replace(test, pattern = "([[:alpha:].+? ])", replacement = "")
test
test <- "C. Montgomery Burns"
test<- str_replace(test, pattern = "([[:alpha:]][[:punct:]])", replacement = "")
test
test <- "C. Montgomery Burns"
test<- str_trim(str_replace(test, pattern = "([[:alpha:]][[:punct:]])", replacement = ""))
test
name <- str_trim(str_replace(name, pattern = "([[:alpha:]][[:punct:]])", replacement = ""))
name
name
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5543642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
name[which(name %in%  name[str_detect(name, ",")])]
convert_names <- function(name){
if(str_detect(name, ",")==TRUE){
fullname <- str_split(name, ", ")
LastName <-fullname[[1]][1]
FirstName <- fullname[[1]][2]
newName <- str_c(FirstName, " ", LastName)
return(newName)
}else
return(name)
}
for (i in seq_along(name)){
name[i] <- convert_names(name[i])
}
name
logical_name <- str_detect(name, "Dr.|Rev.|Mayor|Father|Reverend|Doctor")
logical_name
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{3,}[[:punct:]])", replacement = ""))
name2
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{3}[[:punct:]])", replacement = ""))
name2
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1:3}[[:punct:]])", replacement = ""))
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
name2
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
str_count(name2, "\\w+")
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
name2[str_count(name2, "\\w+")]
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
str_count(name2, "\\w+")
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
name2[str_count(name2, "\\w+") == 2]
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
name2[str_count(name2, "\\w+") == 2]
for (i in seq_along(name)){
if (str_count(name2, "\\w+") == 2){
name3 <- TRUE
}
}
name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
for (val in seq_along(name)){
if (str_count(val, "\\w+") == 2){
name3 <- TRUE
}
}
name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
for (val in name){
if (str_count(val, "\\w+") == 2){
name3 <- TRUE
}
}
name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
for (val in name2){
if (str_count(val, "\\w+") == 2){
name3 <- TRUE
}
}
name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
for (val in name2){
if (str_count(val, "\\w+") == 2){
name3[val] <- TRUE
}
}
name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
for (val in name2){
if (str_count(val, "\\w+") == 2){
seq_along(name3) <- TRUE
}
}
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
str_length(name2)
# for (val in name2){
#     if (str_count(val, "\\w+") == 2){
#         seq_along(name) <- TRUE
#         }
#
# }
#
# name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
str_count(name2, "\\w+")
# for (val in name2){
#     if (str_count(val, "\\w+") == 2){
#         seq_along(name) <- TRUE
#         }
#
# }
#
# name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
str_count(name2, "\\w+") == 2
# for (val in name2){
#     if (str_count(val, "\\w+") == 2){
#         seq_along(name) <- TRUE
#         }
#
# }
#
# name3
name2 <- str_trim(str_replace(name, pattern = "([[:alpha:]]{1,3}[[:punct:]])", replacement = ""))
name3<- str_count(name2, "\\w+") == 2
name3
text <- "At least 20 currencies express money with a dollar sign at the end like so, 500$."
unlist(str_extract_all(text))
text <- "At least 20 currencies express money with a dollar sign at the end like so, 500$."
unlist(str_extract_all(text, "[0-9]+\\$"))
text2 <- "\\home directory\\"
unlist(str_extract_all(text2, "\\b[a-z]{1,4}\\b"))
text2 <- "The diretory on your computer to find the files is \\Office directory\\"
unlist(str_extract_all(text2, "\\b[a-z]{1,4}\\b"))
text2 <- "The diretory on your computer to find the files is \\Office directory\\ but be careful."
unlist(str_extract_all(text2, "\\b[a-z]{1,4}\\b"))
text2 <- "The diretory on your computer to find the files is \\Office directory\\ but be careful."
unlist(str_extract_all(text2, "\b[a-z]{1,4}\b"))
text2 <- "The diretory on your computer to find the files is \\Office directory\\ but be careful."
unlist(str_extract_all(text2, "\\b[a-z]{1,4}\\b"))
text2 <- "The diretory on your computer to find the files is your home directory but be careful."
unlist(str_extract_all(text2, "\\b[a-z]{1,4}\\b"))
text3 <- "The files in your directory are homework.txt, homework.rmd, presentation.txt."
unlist(str_extract_all(text2, ".*?\\.txt$"))
text3 <- "The files in your directory are homework.txt, homework.rmd, presentation.txt."
unlist(str_extract_all(text3, ".*?\\.txt$"))
text3 <- "The files in your directory are homework.txt and presentation.txt."
unlist(str_extract_all(text3, ".*?\\.txt$"))
files  <- "The file in your directory is  presentation.txt."
unlist(str_extract_all(text3, ".*?\\.txt$"))
files  <- "The file in your directory is  presentation.txt."
unlist(str_extract_all(files, ".*?\\.txt$"))
files  <- "The file, presentation.txt, is in your directory."
unlist(str_extract_all(files, ".*?\\.txt$"))
files  <- "Presentation.txt is in your directory."
unlist(str_extract_all(files, ".*?\\.txt$"))
files  <- "Presentation.txt"
unlist(str_extract_all(files, ".*?\\.txt$"))
files  <- "A Presentation.txt"
unlist(str_extract_all(files, ".*?\\.txt$"))
date <- 09161964
unlist(str_extract_all(date, "\\d{2}/\\d{2}/\\d{4}"))
date <- "Today's date is 09/16/1964."
unlist(str_extract_all(date, "\\d{2}/\\d{2}/\\d{4}"))
tags <- c('<b>Bold Text</b>', '<ul>underline</ul>', '<i>italics</i>', '<xml>xml tag</xml>')
tags <- c('<b>Bold Text</b>', '<ul>underline</ul>', '<i>italics</i>', '<xml>xml tag</xml>')
unlist(str_extract(tags,"<(.+?)>.+?</\\1>"))
tags <- c('<bbbbb>Bold Text</b>', '<ul>underline</ul>', '<i>italics</i>', '<xml>xml tag</xml>')
unlist(str_extract(tags,"<(.+?)>.+?</\\1>"))
tags <- c('<bb>Bold Text</b>', '<ul>underline</ul>', '<i>italics</i>', '<xml>xml tag</xml>')
unlist(str_extract(tags,"<(.+?)>.+?</\\1>"))
tags <- c('<b>Bold Text</b>', '<ul>underline</ul>', '<i>italics</i>', '<xml>xml tag</xml>')
unlist(str_extract(tags,"<(.+?)>.+?</\\1>"))
tags <- c('<bbbb>Bold Text</bbbb>', '<ul>underline</ul>', '<i>italics</i>', '<xml>xml tag</xml>')
unlist(str_extract(tags,"<(.+?)>.+?</\\1>"))
