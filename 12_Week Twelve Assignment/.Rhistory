mongo_movies = mongo(db = "movies_noSQL_db") # create connection, database
mongo_movies$count()
library(jsonlite)
Movies_json <- toJSON(Movies)
class(Movies_json)
Movies_json <- str_replace(Movies_json,"\\[","")
Movies_json <- str_replace(Movies_json,"\\]","")
Movies_json <- as.character(Movies_json)
typeof(Movies_json)
typeof(Movies)
test_df <- read.csv("Chicago Homicides 2018.csv")
convert_df <- function(df, db='testMongoDB', col='testcollection', fields=names(df)) {
mongo <- mongo.create(host = "localhost")
if (mongo.is.connected(mongo)) {
for(i in 1:nrow(df)) {
b <- mongo.bson.from.list(df[i,fields])
#print(b)
#print('----------------')
if (!is.null(b)){
mongo.insert(mongo, paste(db, col, sep='.'), b)
print("loaded")
}
else {
print('NULL BSON object')
print(t(df[i,]))
}
}
}
}
test_collection = mongo(collection = "test", db = "testMongoDB")
test_collection$count()
test_collection = mongo(collection = "testcollection", db = "testMongoDB")
test_collection$count()
test_collection = mongo(collection = "testcollection", db = "testMongoDB")
test_collection$count()
my_collection$iterate()$one()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
library(devtools)
install_github(repo = "mongosoup/rmongodb")
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
mongo.is.connected(mongo)
crimes=data.table::fread("Chicago Homicides 2018.csv")
names(crimes)
names(crimes) = gsub(" ","",names(crimes))
names(crimes)
my_collection = mongo(collection = "crimes", db = "Chicago") # create connection, database and collection
my_collection$insert(crimes)
my_collection$count()
my_collection$count()
my_collection$iterate()$one()
options(warn=-1)
library(DBI)
library(RMySQL)
library(stringr)
library(ggplot2)
library(dplyr)
conn<- dbConnect(RMySQL::MySQL(),
dbname="movie_reviews",
host="DESKTOP-FGDMVA4",
user="Student01",
password="CUNY_DATA607"
)
dbListTables(conn)
Reviewers <- dbReadTable(conn, 'Reviewers')
Reviews <- dbReadTable(conn, 'Reviews')
Movies <- dbReadTable(conn, 'movies')
Reviewers$Gender<- str_replace_all(Reviewers$Gender, "\r", "")
Movies$Trailer <- str_replace_all(Movies$Trailer, "\r", "")
Reviews$Comments <- str_replace_all(Reviews$Comments, "\r", "")
mongo_movies = mongo(db = "movies_noSQL_db") # create connection, database
mongo_movies$count()
library(jsonlite)
Movies_json <- toJSON(Movies)
class(Movies_json)
Movies_json <- str_replace(Movies_json,"\\[","")
Movies_json <- str_replace(Movies_json,"\\]","")
Movies_json <- as.character(Movies_json)
typeof(Movies_json)
typeof(Movies)
test_df <- read.csv("Chicago Homicides 2018.csv")
convert_df <- function(df, db='testMongoDB', col='testcollection', fields=names(df)) {
mongo <- mongo.create(host = "localhost")
if (mongo.is.connected(mongo)) {
for(i in 1:nrow(df)) {
b <- mongo.bson.from.list(df[i,fields])
#print(b)
#print('----------------')
if (!is.null(b)){
mongo.insert(mongo, paste(db, col, sep='.'), b)
print("loaded")
}
else {
print('NULL BSON object')
print(t(df[i,]))
}
}
}
}
convert_df(test_df)
#test_collection = mongo(collection = "test", db = "testMongoDB")
#test_collection$count()
test_collection = mongo(collection = "testcollection", db = "testMongoDB")
test_collection$count()
my_collection$iterate()$one()
test_collection = mongo(collection = "testcollection", db = "testMongoDB")
test_collection$count()
my_collection$iterate()$one()
convert_Movies_df <- function(df, db='MoviesMongoDB', col='moviescollection', fields=names(df)) {
mongo <- mongo.create(host = "localhost")
if (mongo.is.connected(mongo)) {
for(i in 1:nrow(df)) {
b <- mongo.bson.from.list(df[i,fields])
#print(b)
#print('----------------')
if (!is.null(b)){
mongo.insert(mongo, paste(db, col, sep='.'), b)
#print("loaded")
}
else {
print('NULL BSON object')
print(t(df[i,]))
}
}
}
}
convert_Movies_df(Movies)
convert_Movies_df(Reviews)
convert_Movies_df(Reviewers)
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$count()
movies_collection$iterate()$one()
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$count()
movies_collection$iterate()$one()
movies_collection$iterate()$two()
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$count()
movies_collection$iterate()
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$count()
cursor <- mongo.find(mongo, 'MoviesMongoDB', query)
cursor <- mongo.find(mongo, 'MoviesMongoDB')
mongo <- mongo.create()
mongo.is.connected(mongo)
mongo <- mongo.create()
mongo.is.connected(mongo)
mongo
mongo <- mongo.create(db='MoviesMongoDB', col='moviescollection')
mongo <- mongo.create(db='MoviesMongoDB')
mongo.is.connected(mongo)
mongo
my_collection$iterate()
mongo_new <- mongo.create(host = "localhost")
mongo_new.is.connected(mongo)
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo.get.database.collections(mongo_new, db = "MoviesMongoDB")
mongo.get.database.collections(mongo_new, db = "Chicago")
collections<- mongo.get.database.collections(mongo_new, db = "Chicago")
collections
collections<- mongo.get.database.collections(mongo_new, db = "Chicago")
typeof(collections)
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
collections<- mongo_new.getCollection("Chicago")
print(mongo.get.database.collections(mongo_new, "Chicago"))
print(mongo.get.database.collections(mongo_new, 'Chicago'))
mongo.get.database.collections(mongo, "Chicago")
# print(mongo_new.get.database.collections(mongo_new, 'Chicago'))
?mongo.get.database.collections
# print(mongo_new.get.database.collections(mongo_new, 'Chicago'))
mongo.destroy(mongo)
mongo.destroy(mongo)
convert_Movies_df <- function(df, db='MoviesMongoDB', col='moviescollection', fields=names(df)) {
mongo <- mongo.create(host = "localhost")
if (mongo.is.connected(mongo)) {
for(i in 1:nrow(df)) {
b <- mongo.bson.from.list(df[i,fields])
#print(b)
#print('----------------')
if (!is.null(b)){
mongo.insert(mongo, paste(db, col, sep='.'), b)
#print("loaded")
}
else {
print('NULL BSON object')
print(t(df[i,]))
}
}
}
}
convert_Movies_df(Movies)
convert_Movies_df(Reviews)
convert_Movies_df(Reviewers)
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$count()
convert_Movies_df <- function(df, db='MoviesMongoDB', col='moviescollection', fields=names(df)) {
mongo <- mongo.create(host = "localhost")
if (mongo.is.connected(mongo)) {
for(i in 1:nrow(df)) {
b <- mongo.bson.from.list(df[i,fields])
#print(b)
#print('----------------')
if (!is.null(b)){
mongo.insert(mongo, paste(db, col, sep='.'), b)
#print("loaded")
}
else {
print('NULL BSON object')
print(t(df[i,]))
}
}
}
}
convert_Movies_df(Movies)
convert_Movies_df(Reviews)
convert_Movies_df(Reviewers)
convert_Movies_df(Movies)
convert_Movies_df(Reviews)
convert_Movies_df(Reviewers)
convert_Movies_df(Movies)
convert_Movies_df(Reviews)
convert_Movies_df(Reviewers)
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$count()
movies_collection.destroy(mongo)
movies_collection.destroy(mongo)
mongo.destroy()
mongo.destroy(mongo)
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
mongo.get.database.collections(mongo_new, 'chicago')
mongo.get.database.collections(mongo_new, 'Chicago')
mongo.get.database.collections(mongo_new, "Chicago")
mongo.get.database.collections(mongo_new, db="Chicago")
mongo.get.database.collections(mongo_new, db = "Chicago")
mongo.get.database.collections(mongo_new, db = "Chicago")
DBNS = "MoviesMongoDB.moviescollection"
mongo.count(mongo, ns = DBNS)
DBNS = "MoviesMongoDB.moviescollection"
mongo.count(mongo_new, ns = DBNS)
mongo.get.database.collections(mongo_new, db = "MoviesMongoDB.moviescollection")
mongo.get.database.collections(mongo_new, "MoviesMongoDB.moviescollection")
setwd(''C:/Users/jkhan/Documents/GitHub/DATA-607-Data-Acquisition-and-Management/12_Week Twelve Assignment')
setwd('C:/Users/jkhan/Documents/GitHub/DATA-607-Data-Acquisition-and-Management/12_Week Twelve Assignment')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
library(devtools)
install_github(repo = "mongosoup/rmongodb")
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
mongo.is.connected(mongo)
#Clean the data
names(crimes) = gsub(" ","",names(crimes))
#Read in the Chicago crimes dataset
crimes=data.table::fread("Chicago Homicides 2018.csv")
names(crimes)
#Clean the data
names(crimes) = gsub(" ","",names(crimes))
names(crimes)
#Create a database and collection called crimes
my_collection = mongo(collection = "crimes", db = "Chicago") # create connection, database and collection
my_collection$insert(crimes)
my_collection$count()
#Create a database and collection called crimes
my_collection = mongo(collection = "crimes", db = "Chicago") # create connection, database and collection
my_collection$insert(crimes)
my_collection$count()
#
my_collection$iterate()$one()
mongo$info()
my_collection$info()
#Close the connection to the mongoDB
mongo.destroy(mongo)
mongo.is.connected(mongo)
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
library(devtools)
install_github(repo = "mongosoup/rmongodb")
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
mongo.is.connected(mongo)
#Read in the Chicago crimes dataset
crimes=data.table::fread("Chicago Homicides 2018.csv")
names(crimes)
#Clean the data
names(crimes) = gsub(" ","",names(crimes))
names(crimes)
#Create a database and collection called crimes
my_collection = mongo(collection = "crimes", db = "Chicago") # create connection, database and collection
my_collection$insert(crimes)
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
mongo.is.connected(mongo)
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
print(mongo.is.connected(mongo))
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
print(mongo.is.connected(mongo))
library(ggplot2)
library(dplyr)
library(maps)
library(ggmap)
library(mongolite)
library(lubridate)
library(gridExtra)
library(rmongodb)
# connect to MongoDB
mongo = mongo.create(host = "localhost")
print(mongo.is.connected(mongo))
#Read in the Chicago crimes dataset
crimes=data.table::fread("Chicago Homicides 2018.csv")
names(crimes)
#Clean the data
names(crimes) = gsub(" ","",names(crimes))
names(crimes)
#Create a database and collection called crimes
my_collection = mongo(collection = "crimes", db = "Chicago") # create connection, database and collection
my_collection$insert(crimes)
#Take a look at the information
my_collection$info()
#Take a count of the collection
my_collection$count()
#Iterate over one table in the database
my_collection$iterate()$one()
#Close the connection to the mongoDB
mongo.destroy(mongo)
print(mongo.is.connected(mongo))
options(warn=-1)
library(DBI)
library(RMySQL)
library(stringr)
library(ggplot2)
library(dplyr)
conn<- dbConnect(RMySQL::MySQL(),
dbname="movie_reviews",
host="DESKTOP-FGDMVA4",
user="Student01",
password="CUNY_DATA607"
)
dbListTables(conn)
Reviewers <- dbReadTable(conn, 'Reviewers')
Reviews <- dbReadTable(conn, 'Reviews')
Movies <- dbReadTable(conn, 'movies')
Reviewers$Gender<- str_replace_all(Reviewers$Gender, "\r", "")
Movies$Trailer <- str_replace_all(Movies$Trailer, "\r", "")
Reviews$Comments <- str_replace_all(Reviews$Comments, "\r", "")
mongo_movies = mongo(db = "movies_noSQL_db") # create connection, database
mongo_movies$count()
Reviewers <- dbReadTable(conn, 'Reviewers')
Reviews <- dbReadTable(conn, 'Reviews')
Movies <- dbReadTable(conn, 'movies')
Reviewers$Gender<- str_replace_all(Reviewers$Gender, "\r", "")
Movies$Trailer <- str_replace_all(Movies$Trailer, "\r", "")
Reviews$Comments <- str_replace_all(Reviews$Comments, "\r", "")
mongo.destroy(mongo_movies)
print(mongo.is.connected(mongo_movies))
options(warn=-1)
library(DBI)
library(RMySQL)
library(stringr)
library(ggplot2)
library(dplyr)
#create a connection to the SQLite database
conn<- dbConnect(RMySQL::MySQL(),
dbname="movie_reviews",
host="DESKTOP-FGDMVA4",
user="Student01",
password="CUNY_DATA607"
)
dbListTables(conn)
#Convert the tables to dataframes
Reviewers <- dbReadTable(conn, 'Reviewers')
Reviews <- dbReadTable(conn, 'Reviews')
Movies <- dbReadTable(conn, 'movies')
Reviewers$Gender<- str_replace_all(Reviewers$Gender, "\r", "")
Movies$Trailer <- str_replace_all(Movies$Trailer, "\r", "")
Reviews$Comments <- str_replace_all(Reviews$Comments, "\r", "")
#Convert the tables to dataframes
Reviewers <- dbReadTable(conn, 'Reviewers')
Reviews <- dbReadTable(conn, 'Reviews')
Movies <- dbReadTable(conn, 'movies')
Reviewers$Gender<- str_replace_all(Reviewers$Gender, "\r", "")
Movies$Trailer <- str_replace_all(Movies$Trailer, "\r", "")
Reviews$Comments <- str_replace_all(Reviews$Comments, "\r", "")
#The parameters take in a dataframe, the name of the Mongo DB, the name of the collection and the variable names of a dataframe
convert_Movies_df <- function(df, db='MoviesMongoDB', col='moviescollection', fields=names(df)) {
#Create a connection
mongo <- mongo.create(host = "localhost")
if (mongo.is.connected(mongo)) {
#Iterates over each row of the dataframe and converts it to bson object which is then inserted into the Mongo instance.
for(i in 1:nrow(df)) {
b <- mongo.bson.from.list(df[i,fields])
if (!is.null(b)){
mongo.insert(mongo, paste(db, col, sep='.'), b)
#print("loaded")
}
else {
print('NULL BSON object')
print(t(df[i,]))
}
}
}
}
convert_Movies_df(Movies)
convert_Movies_df(Reviews)
convert_Movies_df(Reviewers)
movies_collection = mongo(collection = 'moviescollection', db='MoviesMongoDB')
movies_collection$info()
movies_collection$count()
movies_collection$count()
nrow(Reviews)
movies_collection$count()
nrow(Reviews) + nrow(Reviewers)
movies_collection$count()
nrow(Reviews) + nrow(Reviewers) + nrow(Movies)
my_collection$iterate()$one()
movies_collection$iterate()$one()
mongo.get.database.collections(movies_collection, db = "MoviesMongoDB")
mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo <- mongo.create(host = "localhost")
mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
mongo.get.databases()
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#mongo.get.databases()
#mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
mongo.destroy(mongo)
mongo.is.connected(mongo)
#mongo.get.databases()
#mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
#mongo.get.databases()
#mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo_new.get.databases()
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
#mongo.get.database.collections(mongo, db = "MoviesMongoDB")
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
mongo.get.database.collections(mongo_new, db = "MoviesMongoDB")
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
mongo.get.database.collections(mongo_new, db = MoviesMongoDB)
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new)
mongo.get.databases(mongo_new)
mongo.get.database.collections(mongo_new, 'MoviesMongoDB')
mongo_new <- mongo.create(host = "localhost")
mongo.is.connected(mongo_new, db= "MoviesMongoDB" )
# mongo_new <- mongo.create(host = "localhost")
# mongo.is.connected(mongo_new,)
#
# mongo.get.databases(mongo_new)
# mongo.get
mongo.destroy(mongo_new)
mongo_new <- mongo.create(host = "localhost", db='MoviesMongoDB')
mongo.is.connected(mongo_new)
mongo.get.database.collections(mongo_new)
mongo.get.database.collections(mongo_new, db='MoviesMongoDB')
