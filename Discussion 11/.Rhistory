industry_id <- paste("IN",as.character(1:length(industry)),sep = "")
industry_df <- data.frame(industry,industry_id)
knitr::kable(head(industry_df), format = "html")
skills <- unique(main_df$skills)
skills_id <- paste("SK",as.character(1:length(skills)),sep = "")
skills_df <- data.frame(skills,skills_id)
knitr::kable(head(skills_df), format = "html")
title <- unique(main_df$title)
title_id <- paste("TI",as.character(1:length(title)),sep = "")
title_df <- data.frame(title,title_id)
knitr::kable(head(title_df), format = "html")
company <- unique(main_df$company)
company_id <- paste("CO",as.character(1:length(company)),sep = "")
company_df <- data.frame(company,company_id)
knitr::kable(head(company_df), format = "html")
website <- unique(main_df$website)
website_id <- paste("WS",as.character(1:length(website)),sep = "")
website_df <- data.frame(website,website_id)
knitr::kable(head(website_df), format = "html")
description <- unique(main_df$description)
description_id <- paste("D",as.character(1:length(description)),sep = "")
description_df <- data.frame(description,description_id)
str(description_df)
jobs_df <- main_df %>%
left_join(industry_df, by="industry") %>%
left_join(skills_df, by="skills") %>%
left_join(title_df, by="title") %>%
left_join(company_df, by="company") %>%
left_join(website_df, by="website") %>%
left_join(description_df, by="description") %>%
select(-industry,-skills,-title,-company,-website,-description)
knitr::kable(head(jobs_df), format = "html")
ds_job_db <- dbConnect(RSQLite::SQLite(), "")
dbWriteTable(ds_job_db, "industry", industry_df)
dbWriteTable(ds_job_db, "skills", skills_df)
dbWriteTable(ds_job_db, "title", title_df)
dbWriteTable(ds_job_db, "company", company_df)
dbWriteTable(ds_job_db, "website", website_df)
dbWriteTable(ds_job_db, "description", description_df)
dbWriteTable(ds_job_db, "jobs", jobs_df)
jobs_cnt <- dbGetQuery(ds_job_db,
"
SELECT DISTINCT
W.WEBSITE as Website
,COUNT(DISTINCT J.JOB_ID) AS 'Number of Jobs'
FROM JOBS J
INNER JOIN WEBSITE W ON J.WEBSITE_ID = W.WEBSITE_ID
GROUP BY
W.WEBSITE
"
)
ggplot(jobs_cnt, aes(Website,`Number of Jobs`)) +
geom_bar(stat = "identity", aes(fill=Website)) +
theme_minimal() +
geom_text(aes(label = `Number of Jobs`),vjust = 2)
s_avg <- dbGetQuery(ds_job_db,
"
SELECT
MAIN.INDUSTRY
,AVG(MAIN.COUNT) AS 'Average Number of Skills'
FROM (
SELECT DISTINCT
I.INDUSTRY
,J.JOB_ID
,COUNT(DISTINCT S.SKILLS_ID) AS COUNT
FROM JOBS J
INNER JOIN INDUSTRY I ON J.INDUSTRY_ID = I.INDUSTRY_ID
INNER JOIN SKILLS S ON J.SKILLS_ID = S.SKILLS_ID
GROUP BY
I.INDUSTRY
,J.JOB_ID
) MAIN
WHERE
MAIN.INDUSTRY IS NOT NULL
GROUP BY
MAIN.INDUSTRY
ORDER BY
AVG(MAIN.COUNT) DESC
LIMIT 25
"
)
knitr::kable(s_avg, format = "html")
Top50_df <- master_skills_df[master_skills_df$Total>54,]
Top50_df <- Top50_df[order(-Top50_df$Total),]
Top50_df
Top50_df_percentages <- Top50_df %>%
mutate(Indeed_pct = round(Indeed / sum(Indeed), 3),
CareerBuilder_pct = round(CareerBuilder / sum(CareerBuilder),3),
LinkedIn_pct = round(LinkedIn / sum(LinkedIn),3),
Total_pct = round(Total / sum(Total),3)) %>%
select(Skills,Indeed_pct,CareerBuilder_pct,LinkedIn_pct,Total_pct)
head(Top50_df_percentages,10)
tail(Top50_df_percentages,10)
Top6<- Top50_df[Top50_df$Total>556,]
Top6<-Top5[order(-Top5$Total),]
Top6<- Top50_df[Top50_df$Total>556,]
Top6<-Top6[order(-Top6$Total),]
Top6
ggplot(data=Top5, aes(x=Skills, y=Total))+
geom_bar(position="dodge",stat="identity",fill=c("orange")) +
coord_flip() +
ggtitle("Top Six Most In Demand Data Science Skills")
ggplot(data=Top6, aes(x=Skills, y=Total))+
geom_bar(position="dodge",stat="identity",fill=c("orange")) +
coord_flip() +
ggtitle("Top Six Most In Demand Data Science Skills")
wordcloud(Top50_df$Skills, Top50_df$Total)
frequency<- count(LinkedIn_DSjobs, skills)
top_Skills<- frequency[frequency$n > 0,]
top_Skills[order(-top_Skills$n),]
colnames(master_skills_df) <- c("Skills", "LinkedIN", "CareerBuilder","Indeed", "Total")
master_skills_df
colnames(master_skills_df) <- c("Skills", "LinkedIn", "CareerBuilder","Indeed", "Total")
master_skills_df
knitr::opts_chunk$set(echo = TRUE)
options(warn=-1)
library(tidyverse)
library(rvest)
library(stringr)
library(dplyr)
library(ggplot2)
library(rebus)
library(lubridate)
library(tm)
library(purrr)
library(plotly)
library(wordcloud)
library(DBI)
library(RSQLite)
LinkedIn_DSjobs <- read.csv("LinkedIn.csv", stringsAsFactors = FALSE)
#Cleaning the phrase "Programming Language" from Python so that we can match it in data from the other websites.
LinkedIn_DSjobs$skills<-str_trim(str_replace(LinkedIn_DSjobs$skills, "\\(Programming Language\\)", ""))
frequency<- count(LinkedIn_DSjobs, skills)
top_Skills<- frequency[frequency$n > 0,]
top_Skills[order(-top_Skills$n),]
Indeed_DSjobs <- read.csv("Data_Science_Indeed_Jobs.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
Indeed_DSjobs$Description <- str_replace_all(Indeed_DSjobs$Description,"[\n]","")
top_Skills_Indeed <- data.frame(skills=character(), n=integer())
for (i in 1:nrow(top_Skills))
{
newRow <- data.frame(skills=top_Skills$skills[i],
n=length(unlist(str_extract_all(Indeed_DSjobs$Description,top_Skills$skills[i]))))
top_Skills_Indeed <- rbind(top_Skills_Indeed, newRow)
}
top_Skills_Indeed$skills <- as.character(top_Skills_Indeed$skills)
top_Skills_Indeed<-top_Skills_Indeed[!duplicated(top_Skills_Indeed),]
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
CareerBuilder_DSjobs <- read.csv("careerbuilder.csv", encoding = "UTF-8")
CareerBuilder_DSjobs$jobdesc <- str_replace_all(CareerBuilder_DSjobs$jobdesc,"[\n]","")
top_Skills_CB <- data.frame(skills=character(), n=integer())
for (i in 1:nrow(top_Skills))
{
newRow <- data.frame(skills=top_Skills$skills[i],
n=length(unlist(str_extract_all(CareerBuilder_DSjobs$jobdesc,top_Skills$skills[i]))))
top_Skills_CB<- rbind(top_Skills_CB, newRow)
}
top_Skills_CB<-top_Skills_CB[!duplicated(top_Skills_CB), ]
top_Skills_CB$skills<-as.character(top_Skills_CB$skills)
top_Skills_CB[order(-top_Skills_CB$n),]
tables <- list(top_Skills,top_Skills_Indeed,top_Skills_CB)
master_skills_df <- reduce(tables,left_join,by="skills")
master_skills_df
master_skills_df$Total<- rowSums(master_skills_df[, c("n.x", "n.y", "n")], na.rm = TRUE)
colnames(master_skills_df) <- c("Skills", "LinkedIn", "CareerBuilder","Indeed", "Total")
master_skills_df
write.csv(master_skills_df, file = "Master_Skills_List.csv")
linkedin <- read.csv('LinkedIn.csv', stringsAsFactors = FALSE)
knitr::kable(head(linkedin), format = "html")
linkedin <- linkedin %>%
mutate(website = "linkedin.com")
knitr::kable(head(linkedin), format = "html")
indeed <- read.csv('Data_Science_Indeed_Jobs.csv', stringsAsFactors = FALSE)
names(indeed)
indeed <- indeed %>%
mutate(website = "indeed.com") %>%
rename(job_id = X,
title = Title,
company = Company,
description = Description
) %>%
select(-Link)
indeed$job_id <- paste("IND",as.character(indeed$job_id), sep = "")
str(indeed)
career <- read.csv('careerbuilder.csv', stringsAsFactors = FALSE)
str(career)
career <- career %>%
rename(title = jobbank..Job.Title.,
description = jobdesc) %>%
mutate(website = "careerbuilder.com")
career$job_id <- paste("CB", as.character(career$job_id), sep = "")
str(career)
main_df <- full_join(linkedin,indeed,
by=c("job_id",
"title",
"website"))
main_df <- full_join(main_df,career,
by=c("job_id",
"title",
"industry",
"description",
"website"))
knitr::kable(head(main_df), format = "html")
industry <- unique(main_df$industry)
industry_id <- paste("IN",as.character(1:length(industry)),sep = "")
industry_df <- data.frame(industry,industry_id)
knitr::kable(head(industry_df), format = "html")
skills <- unique(main_df$skills)
skills_id <- paste("SK",as.character(1:length(skills)),sep = "")
skills_df <- data.frame(skills,skills_id)
knitr::kable(head(skills_df), format = "html")
title <- unique(main_df$title)
title_id <- paste("TI",as.character(1:length(title)),sep = "")
title_df <- data.frame(title,title_id)
knitr::kable(head(title_df), format = "html")
company <- unique(main_df$company)
company_id <- paste("CO",as.character(1:length(company)),sep = "")
company_df <- data.frame(company,company_id)
knitr::kable(head(company_df), format = "html")
website <- unique(main_df$website)
website_id <- paste("WS",as.character(1:length(website)),sep = "")
website_df <- data.frame(website,website_id)
knitr::kable(head(website_df), format = "html")
description <- unique(main_df$description)
description_id <- paste("D",as.character(1:length(description)),sep = "")
description_df <- data.frame(description,description_id)
str(description_df)
jobs_df <- main_df %>%
left_join(industry_df, by="industry") %>%
left_join(skills_df, by="skills") %>%
left_join(title_df, by="title") %>%
left_join(company_df, by="company") %>%
left_join(website_df, by="website") %>%
left_join(description_df, by="description") %>%
select(-industry,-skills,-title,-company,-website,-description)
knitr::kable(head(jobs_df), format = "html")
ds_job_db <- dbConnect(RSQLite::SQLite(), "")
dbWriteTable(ds_job_db, "industry", industry_df)
dbWriteTable(ds_job_db, "skills", skills_df)
dbWriteTable(ds_job_db, "title", title_df)
dbWriteTable(ds_job_db, "company", company_df)
dbWriteTable(ds_job_db, "website", website_df)
dbWriteTable(ds_job_db, "description", description_df)
dbWriteTable(ds_job_db, "jobs", jobs_df)
jobs_cnt <- dbGetQuery(ds_job_db,
"
SELECT DISTINCT
W.WEBSITE as Website
,COUNT(DISTINCT J.JOB_ID) AS 'Number of Jobs'
FROM JOBS J
INNER JOIN WEBSITE W ON J.WEBSITE_ID = W.WEBSITE_ID
GROUP BY
W.WEBSITE
"
)
ggplot(jobs_cnt, aes(Website,`Number of Jobs`)) +
geom_bar(stat = "identity", aes(fill=Website)) +
theme_minimal() +
geom_text(aes(label = `Number of Jobs`),vjust = 2)
s_avg <- dbGetQuery(ds_job_db,
"
SELECT
MAIN.INDUSTRY
,AVG(MAIN.COUNT) AS 'Average Number of Skills'
FROM (
SELECT DISTINCT
I.INDUSTRY
,J.JOB_ID
,COUNT(DISTINCT S.SKILLS_ID) AS COUNT
FROM JOBS J
INNER JOIN INDUSTRY I ON J.INDUSTRY_ID = I.INDUSTRY_ID
INNER JOIN SKILLS S ON J.SKILLS_ID = S.SKILLS_ID
GROUP BY
I.INDUSTRY
,J.JOB_ID
) MAIN
WHERE
MAIN.INDUSTRY IS NOT NULL
GROUP BY
MAIN.INDUSTRY
ORDER BY
AVG(MAIN.COUNT) DESC
LIMIT 25
"
)
knitr::kable(s_avg, format = "html")
Top50_df <- master_skills_df[master_skills_df$Total>54,]
Top50_df <- Top50_df[order(-Top50_df$Total),]
Top50_df
Top50_df_percentages <- Top50_df %>%
mutate(Indeed_pct = round(Indeed / sum(Indeed), 3),
CareerBuilder_pct = round(CareerBuilder / sum(CareerBuilder),3),
LinkedIn_pct = round(LinkedIn / sum(LinkedIn),3),
Total_pct = round(Total / sum(Total),3)) %>%
select(Skills,Indeed_pct,CareerBuilder_pct,LinkedIn_pct,Total_pct)
head(Top50_df_percentages,10)
tail(Top50_df_percentages,10)
Top6<- Top50_df[Top50_df$Total>556,]
Top6<-Top6[order(-Top6$Total),]
Top6
ggplot(data=Top6, aes(x=Skills, y=Total))+
geom_bar(position="dodge",stat="identity",fill=c("orange")) +
coord_flip() +
ggtitle("Top Six Most In Demand Data Science Skills")
wordcloud(Top50_df$Skills, Top50_df$Total)
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
top_Skills_Indeed[skills = "Ph",]
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
top_Skills_Indeed[skills == "Ph",]
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
top_Skills_Indeed[skills == "Ph.D.",]
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
top_Skills_Indeed[skills == "Ph D.",]
top_Skills_CB<-top_Skills_CB[!duplicated(top_Skills_CB), ]
top_Skills_CB$skills<-as.character(top_Skills_CB$skills)
top_Skills_CB[order(-top_Skills_CB$n),]
top_Skills_CB<-top_Skills_CB[!duplicated(top_Skills_CB), ]
top_Skills_CB$skills<-as.character(top_Skills_CB$skills)
top_Skills_CB[order(-top_Skills_CB$skills),]
top_Skills_CB<-top_Skills_CB[!duplicated(top_Skills_CB), ]
top_Skills_CB$skills<-as.character(top_Skills_CB$skills)
top_Skills_CB[order(-top_Skills_CB$n),]
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
top_Skills_Indeed[skills=="C++"]
top_Skills_Indeed[skills=="C++",]
top_Skills_Indeed[skills=="C[\\+\\+]",]
top_Skills_Indeed[skills=="C'[\\+\\+]'",]
top_Skills_Indeed[skills=="C'[\+\+]'",]
top_Skills_Indeed[skills=="C'[\\+\\+]'",]
top_Skills_Indeed[skills=='C"[\\+\\+]"',]
top_Skills_Indeed[skills=='C"[[\\+\\+]]"',]
str_extract_all(top_Skills_Indeed$skills, 'C[\\+\\+]')
str_extract_all(top_Skills_Indeed$skills, 'C"[\\+\\+]"')
str_extract_all(top_Skills_Indeed$skills, 'C"[\\+]"')
for (i in 1:nrow(top_Skills))
{
newRow <- data.frame(skills=top_Skills$skills[i],
n=length(unlist(str_extract_all(Indeed_DSjobs$Description,top_Skills$skills[i]))))
top_Skills_Indeed <- rbind(top_Skills_Indeed, newRow)
newRow <- data.frame(skills="",
n=0)
}
top_Skills_Indeed$skills <- as.character(top_Skills_Indeed$skills)
top_Skills_Indeed<-top_Skills_Indeed[!duplicated(top_Skills_Indeed),]
top_Skills_Indeed[order(-top_Skills_Indeed$n),]
for (i in 1:nrow(top_Skills))
{
newRow <- data.frame(skills=top_Skills$skills[i],
n=length(unlist(str_extract_all(Indeed_DSjobs$Description,top_Skills$skills[i]))))
newRow
top_Skills_Indeed <- rbind(top_Skills_Indeed, newRow)
}
top_Skills_Indeed$skills <- as.character(top_Skills_Indeed$skills)
top_Skills_Indeed<-top_Skills_Indeed[!duplicated(top_Skills_Indeed),]
str_extract_all(CareerBuilder_DSjobs$jobdesc,"C++")
str_extract_all(CareerBuilder_DSjobs$jobdesc,"C[\\++]")
str_extract_all(CareerBuilder_DSjobs$jobdesc,"C[\\+\\+]")
str_extract_all(CareerBuilder_DSjobs$jobdesc,"C[\\+\\+ ]")
str_extract_all(CareerBuilder_DSjobs$jobdesc,"C++ Programming")
install.packages("Hmisc")
knitr::opts_chunk$set(echo = TRUE)
describe(mlb_df$ERA)
#import the required libraries
library(dplyr)
library(httr)
library(jsonlite)
library(tidyverse)
library(rvest)
library(stringr)
library(rebus)
library(tm)
library(wordcloud)
library(viridisLite)
library(ggplot2)
library(stringr)
library(lubridate)
library(GENEAread)
library(Hmisc)
describe(mlb_df$ERA)
mlb_df <- read.csv('DATA/MLB_PITCHING_STATS_1998_to_2017.csv')
head(mlb_df, 200)
mlb_df[mlb_df$W >= 100, "Record"] <- "100 wins or Above"
mlb_df[mlb_df$W >= 82  & mlb_df$W < 100, "Record"] <- "Above .500 and Less than 100 Wins"
mlb_df[mlb_df$W < 82 & mlb_df$W > 50, "Record"] <- "Below .500 but above 50 wins"
mlb_df[mlb_df$W <= 50, "Record"] <- "Less than 50 wins"
mlb_df$Record <- as.factor(mlb_df$Record)
mlb_df$League <- case_when(mlb_df$Team == 'Braves'~'National League',
mlb_df$Team == 'Marlins'~'National League',
mlb_df$Team == 'Mets'~'National League',
mlb_df$Team == 'Phillies'~'National League',
mlb_df$Team == 'Nationals'~'National League',
mlb_df$Team == 'Cubs'~'National League',
mlb_df$Team == 'Reds'~'National League',
mlb_df$Team == 'Brewers'~'National League',
mlb_df$Team == 'Pirates'~'National League',
mlb_df$Team == 'Cardinals'~'National League',
mlb_df$Team == 'iamondbacks'~'National League',
mlb_df$Team == 'Rockies'~'National League',
mlb_df$Team == 'Dodgers'~'National League',
mlb_df$Team == 'Padres'~'National League',
mlb_df$Team == 'Giants'~'National League',
TRUE ~ as.character('American League'))
rows <- as.numeric(row.names.data.frame(mlb_df[mlb_df$Team == 'Astros',]))
rows <- rows[rows < 480]
mlb_df$League[ rows] <- "National League"
mlb_df[mlb_df$Team == 'Astros', ]
describe(mlb_df$ERA)
describe(mlb_df$SO)
describe(mlb_df$WHIP)
describe(mlb_df$FIP)
table(mlb_df$Record, useNA='ifany')
ggplot(mlb_df, aes(x=Record)) + geom_histogram()
ggplot(mlb_df, aes(x=W)) + geom_histogram()
ggplot(mlb_df, aes(x=W)) + geom_histogram(breaks=seq(20, 50, by =2),
col="red",
fill="green")
ggplot(mlb_df, aes(x=W)) + geom_histogram(
col="red",
fill="green")
ggplot(mlb_df, aes(x=W)) + geom_histogram(
col="blue",
fill="yellow")
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=20
col="blue",
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=20,
col="blue",
fill="yellow")
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=15,
col="blue",
fill="yellow")
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=15,
col="blue",
fill="yellow") + labs(title="Histogram for Wins") +
labs(x="Wins", y="Count")
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=15,
col="blue",
fill="yellow") + labs(title="Histogram for Wins") +
labs(x="Wins", y="Count")
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Wins") +
labs(x="Wins", y="Count")
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Wins", align="center") +
labs(x="Wins", y="Count")
#import the required libraries
library(dplyr)
library(httr)
library(jsonlite)
library(tidyverse)
library(rvest)
library(stringr)
library(rebus)
library(tm)
library(wordcloud)
library(viridisLite)
library(ggplot2)
library(stringr)
library(lubridate)
library(GENEAread)
library(Hmisc)
theme_update(plot.title = element_text(hjust = 0.5))
ggplot(mlb_df, aes(x=W)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Wins", align="center") +
labs(x="Wins", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Wins", align="center") +
labs(x="Wins", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for ERA") +
labs(x="Earned Run Average", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=15,
col="white",
fill="red") + labs(title="Histogram for ERA") +
labs(x="Earned Run Average", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=10,
col="white",
fill="red") + labs(title="Histogram for ERA") +
labs(x="Earned Run Average", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=20,
col="white",
fill="red") + labs(title="Histogram for ERA") +
labs(x="Earned Run Average", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=50,
col="white",
fill="red") + labs(title="Histogram for ERA") +
labs(x="Earned Run Average", y="Count")
ggplot(mlb_df, aes(x=ERA)) + geom_histogram(bins=20,
col="white",
fill="red") + labs(title="Histogram for ERA") +
labs(x="Earned Run Average", y="Count")
ggplot(mlb_df, aes(x=FIP)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Fielding Independent Pitching") +
ggplot(mlb_df, aes(x=FIP)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Fielding Independent Pitching")
ggplot(mlb_df, aes(x=FIP)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Fielding Independent Pitching") +
labs(x=FIP, y="Count")
ggplot(mlb_df, aes(x=FIP)) + geom_histogram(bins=15,
col="blue",
fill="orange") + labs(title="Histogram for Fielding Independent Pitching") +
labs(x="FIP", y="Count")
mlb_df <- read.csv('DATA/MLB_PITCHING_STATS_1998_to_2017.csv')
head(mlb_df, 10)
setwd('C:/Users/jkhan/Documents/GitHub/DATA-607-Data-Acquisition-and-Management/Discussion 11')
knitr::opts_chunk$set(echo = TRUE)
