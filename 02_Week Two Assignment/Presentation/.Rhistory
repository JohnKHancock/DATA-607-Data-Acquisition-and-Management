Rchallenge <- read.csv("~/CUNY Application/Challenge Exam/Rchallenge.csv")
View(Rchallenge)
palindrone <- function(word){
word2 = stringi::stri_reverse(word)
if (word == word2){
result <- TRUE
}else{
result <- FALSE
}
return(result)
}
palindrone('radar')
?grep::ignore.case
sameWord <- function(word1, word2){
if (grep("[a-b]", word1, ignore.case=TRUE) == grep("[a-b]",word2, ignore.case=TRUE)){
result <- TRUE
}else{
result <- FALSE
}
return(result)
}
sameWord("HELLO" ,"hello")
sameWord <- function(word1, word2){
x <- ignore.case(word1)
y <- ignore.case(word2)
if (x==y){
result <- TRUE
}else{
result <- FALSE
}
return(result)
}
sameWord("HELLO" ,"hello")
sameWord <- function(word1, word2){
x <- toupper(word1)
y <- toupper(word2)
if (x==y){
result <- TRUE
}else{
result <- FALSE
}
return(result)
}
sameWord("HELLO" ,"hello")
sameWord <- function(word1, word2){
x <- toupper(word1)
y <- toupper(word2)
if (x==y){
result <- TRUE
}else{
result <- FALSE
}
return(result)
}
sameWord("HELLO" ,"hello")
knitr::opts_chunk$set(echo = TRUE)
Affairs2DF <- AffairsDF[[sex, ym, age, education, occupation, nbaffairs]]
#This dataset is about extra marital affairs
AffairsDF <- read.csv('C:/Users/jkhan/Documents/CUNY/Bridge Program/Week 2/R/Fair.csv')
summary(AffairsDF)
#Mean and median of years married
mean(AffairsDF[["ym"]])
median(AffairsDF[["ym"]])
#Mean and median of age
mean(AffairsDF[["age"]])
median(AffairsDF[["age"]])
Affairs2DF <- AffairsDF[[sex, ym, age, education, occupation, nbaffairs]]
Affairs2DF <- AffairsDF[["sex", "ym", "education", "occupation", "nbaffairs"]]
Affairs2DF <- AffairsDF["sex", "ym", "education", "occupation", "nbaffairs"]
Affairs2DF <- AffairsDF[["sex", "ym", "education", "occupation", "nbaffairs"]]
Affairs2DF <- as_data_frame(AffairsDF[["sex", "ym", "education", "occupation", "nbaffairs"]])
Affairs2DF <- AffairsDF[,c("sex", "ym", "education", "occupation", "nbaffairs")]
summary(Affairs2DF)
Affairs2DF[c("city","state","zipcode")]
Affairs2DF[c("city","state","zipcode")] <- "NA"
Affairs2DF
Affairs2DF[c("city","state","zipcode")] <- "NA"
Affairs2DF <- AffairsDF[,c("sex", "ym", "age", "education", "occupation", "nbaffairs")]
Affairs2DF[c("city","state","zipcode")] <- "NA"
summary(Affairs2DF)
#Mean and median of years married
mean(AffairsDF2[["ym"]])
summary(Affairs2DF)
#Mean and median of years married
mean(Affairs2DF[["ym"]])
median(Affairs2DF[["ym"]])
#Mean and median of age
mean(Affairs2DF[["age"]])
median(Affairs2DF[["age"]])
Affairs2DF$city
Affairs2DF$city[city=="NA"] <- "New York"
Affairs2DF$city
Affairs2DF$city["city"=="NA"] <- "New York"
Affairs2DF$city
Affairs2DF$city
Affairs2DF$city[Affairs2DF$city=="NA"] <- "New York"
Affairs2DF$city
#This dataset is about extra marital affairs
AffairsDF <- read.csv('C:/Users/jkhan/Documents/CUNY/Bridge Program/Week 2/R/Fair.csv')
summary(AffairsDF)
#Mean and median of years married
mean <- mean(AffairsDF[["ym"]])
median <- median(AffairsDF[["ym"]])
sprintf("The mean of years married is %i", mean)
#This dataset is about extra marital affairs
AffairsDF <- read.csv('C:/Users/jkhan/Documents/CUNY/Bridge Program/Week 2/R/Fair.csv')
summary(AffairsDF)
#Mean and median of years married
mean <- mean(AffairsDF[["ym"]])
median <- median(AffairsDF[["ym"]])
sprintf("The mean of years married is %f", mean)
sprintf("The median of years married is %f", median)
#Mean and median of age
mean2 <- mean(AffairsDF[["age"]])
median2 <- median(AffairsDF[["age"]])
sprintf("The mean of age is %f", mean2)
sprintf("The median of age is %f", median2)
#This dataset is about extra marital affairs
AffairsDF <- read.csv('C:/Users/jkhan/Documents/CUNY/Bridge Program/Week 2/R/Fair.csv')
summary(AffairsDF)
#Mean and median of years married
mean <- mean(AffairsDF[["ym"]])
median <- median(AffairsDF[["ym"]])
sprintf("The mean of years married is %f", mean)
sprintf("The median of years married is %f", median)
#Mean and median of age
mean2 <- mean(AffairsDF[["age"]])
median2 <- median(AffairsDF[["age"]])
sprintf("The mean of age is %f%2", mean2)
#This dataset is about extra marital affairs
AffairsDF <- read.csv('C:/Users/jkhan/Documents/CUNY/Bridge Program/Week 2/R/Fair.csv')
summary(AffairsDF)
#Mean and median of years married
mean <- mean(AffairsDF[["ym"]])
median <- median(AffairsDF[["ym"]])
sprintf("The mean of years married is %f", mean)
sprintf("The median of years married is %f", median)
#Mean and median of age
mean2 <- mean(AffairsDF[["age"]])
median2 <- median(AffairsDF[["age"]])
sprintf("The mean of age is %.3f", mean2)
sprintf("The median of age is %f", median2)
#This dataset is about extra marital affairs
AffairsDF <- read.csv('C:/Users/jkhan/Documents/CUNY/Bridge Program/Week 2/R/Fair.csv')
summary(AffairsDF)
#Mean and median of years married
mean <- mean(AffairsDF[["ym"]])
median <- median(AffairsDF[["ym"]])
sprintf("The mean of years married is %.2f", mean)
sprintf("The median of years married is %.2f", median)
#Mean and median of age
mean2 <- mean(AffairsDF[["age"]])
median2 <- median(AffairsDF[["age"]])
sprintf("The mean of age is %.2f", mean2)
sprintf("The median of age is %.2f", median2)
summary(Affairs2DF)
#Mean and median of years married
mean <- mean(Affairs2DF[["ym"]])
median <- median(Affairs2DF[["ym"]])
sprintf("The mean of years married is %.2f", mean)
sprintf("The median of years married is %.2f", median)
#Mean and median of age
mean2 <- mean(Affairs2DF[["age"]])
median2 <- median(Affairs2DF[["age"]])
sprintf("The mean of age is %.2f", mean2)
sprintf("The median of age is %.2f", median2)
knitr::opts_chunk$set(echo = TRUE)
1/540
1/540
print("The probability of selecting chip no. 505 out of 540 is 1/540")
1/540
print("The probability of selecting chip no. 505 out of 540 is 1/540 or %.4f", 1/540)
1/540
sprintf("The probability of selecting chip no. 505 out of 540 is 1/540 or %.4f.", 1/540)
1/540
sprintf('The probability of selecting chip no. 505 out of 540 is 1/540 or %.4f.', 1/540)
print("S = {A. C, E, T, F, V}")
sprintf('The probability of selecting card that will be a heart and not a face card 10/52 or %.4f.', 10/52)
sprintf('The probability of selecting card that will be a heart and not a face card is 10/52 or %.4f.', 10/52)
print("The event space is {1&1, 1&2, 1&3, 1&4, 2&1, 2&2, 2&3, 3&1, 3&2, 4&1}. Each event has a 1/36 chance totaled together and the result is 10/36 or %.4f.', 10/36)
sprint("The event space is {1&1, 1&2, 1&3, 1&4, 2&1, 2&2, 2&3, 3&1, 3&2, 4&1}. Each event has a 1/36 chance totaled together and the result is 10/36 or %.4f.', 10/36)
sprint('The event space is {1&1, 1&2, 1&3, 1&4, 2&1, 2&2, 2&3, 3&1, 3&2, 4&1}. Each event has a 1/36 chance totaled together and the result is 10/36 or %.4f.', 10/36)
sprintf('The event space is {1&1, 1&2, 1&3, 1&4, 2&1, 2&2, 2&3, 3&1, 3&2, 4&1}. Each event has a 1/36 chance totaled together and the result is 10/36 or %.4f.', 10/36)
sprintf('There are 964 males and 1037 females.  The probability that a customer is male is %.4f', 964/2001)
sprintf("The probability that the first card will be a club is %.4f, the second card will be a black card is %.4f, and the third card will be a face card is %.4f', 13/52, 26/52, 16/52)
sprintf("The probability that the first card will be a club is %.4f, the second card will be a black card is %.4f, and the third card will be a face card is %.4f", 13/52, 26/52, 16/52)
sprintf("With replacement means that the probabilities are independent of each other. The probability that the first card will be a club is %.4f, the second card will be a black card is %.4f, and the third card will be a face card is %.4f", 13/52, 26/52, 16/52)
sprintf("With replacement means that the probabilities are independent of each other. The probability that the first card will be a club is %.4f, the second card will be a black card is %.4f, and the third card will be a face card is %.4f. The total probability is: %.4f", 13/52, 26/52, 16/52, (13*26*16)/52)
sprintf("With replacement means that the probabilities are independent of each other. The probability that the first card will be a club is %.4f, the second card will be a black card is %.4f, and the third card will be a face card is %.4f. The total probability is: %.4f", 13/52, 26/52, 16/52, ((13/52)**26/52)*(16/52))
sprintf("With replacement means that the probabilities are independent of each other. The probability that the first card will be a club is %.4f, the second card will be a black card is %.4f, and the third card will be a face card is %.4f. The total probability is: %.4f", 13/52, 26/52, 16/52, .25*.5*.30769)
sprintf("Without replacement means that the probabilities are dependent of each other. The probability of choosing a spade for the second card drawn, if the first card, drawn without replacement, was a heart is13/51 or: %.4f", 13/51)
sprintf("Without replacement means that the probabilities are dependent of each other. The probability of choosing a spade for the second card drawn, if the first card, drawn without replacement, was a heart is 13/51 or: %.4f", 13/51)
sprintf("Without replacement means that the probabilities are dependent of each other. The probability of choosing a spade for the second card drawn, if the first card, drawn without replacement, was a heart is 13/52 or: %.4f", 13/51)
sprintf("Without replacement means that the probabilities are dependent of each other. The probability of choosing a spade for the second card drawn, if the first card, drawn without replacement, was a heart is 13/52 or: %.4f", 13/52)
sprintf("Without replacement means that the probabilities are dependent of each other. The probability of choosing a spade for the second card drawn, if the first card, drawn without replacement, was a heart is 13/51 or: %.4f", 13/51)
sprintf("The probability of choosing a heart and then, without replacement, a red card is 25/51 or: %.4f", 25/51)
sprintf("The probability of choosing a junior female and then a freshmen male at random is: %.4f", ((4/85) * (12/84)))
sprintf("The probability of a randomly chosen applicant has a graduate degree, given that they are male is P(Graduate Degree | Male)*P(Male) is P: %.4f", 0.173333333
*0.47)
sprintf("The probability that a randomly chosen applicant is male, given that the applicant has a graduate degree is P(Male| Graduate Degree): %.4f", ) (141/300) * (102/300))
sprintf("The probability that a randomly chosen applicant is male, given that the applicant has a graduate degree is P(Male| Graduate Degree): %.4f", (141/300) * (102/300))
sprintf("There are %.4f value meal packages", 6*5*3)
sprintf("There are %.0f value meal packages", 6*5*3)
sprintf("There are %.0f value meal packages that are possible.", 6*5*3)
sprintf("The doctor can vist patients 5! times or %.0f", 5*4*3*2*1)
sprintf("The number of different possible lineups is %.0f times.", 8*7*6*5*4)
sprintf("The number of different possible lineups is %.0f.", 8*7*6*5*4)
sprintf("The universe of total outcomes is %.0f", 6**9)
sprintf("The universe of total outcomes is %.0f", 6^9)
sprintf("Rudy can choose %0f toppings combinations.", 14*13*12*11*10*9)
sprintf("Rudy can choose %.0f toppings combinations.", 14*13*12*11*10*9)
knitr::opts_chunk$set(echo = TRUE)
A <- -1
B <- 4
C <- A +  B
C
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
download.file("http://www.openintro.org/stat/data/cc.RData", destfile = "cc.RData")
load("cc.RData")
download.file("https://www.rdocumentation.org/packages/openintro")
library(openintro)
library(openintro)
open('https://raw.githubusercontent.com/jbryer/DATA606/master/inst/labs/Lab0/intro_to_r.Rmd')
download.file('https://raw.githubusercontent.com/jbryer/DATA606/master/inst/labs/Lab0/intro_to_r.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
install.packages("VennDiagram")
library(VennDiagram)
draw.single.venn(area = 14.6%, category = "Dog People")
draw.single.venn(area = .104, category = "People in Poverty English Only")
draw.single.venn(area = .104, category = "People in Poverty English Only")
draw.single.venn(area = 22, category = "People in Poverty English Only")
grid.newpage()
draw.pairwise.venn(area1 = .104, area2 = .165, cross.area = .042, category = c("Poverty English Only",
"Foreign Language Speakers"))
grid.newpage()
draw.pairwise.venn(area1 = .146, area2 = .207, cross.area = .042, category = c("Poverty English Only",
"Foreign Language Speakers"))
grid.newpage()
draw.pairwise.venn(area1 = .146, area2 = .207, cross.area = .042, category = c("Foreign Language",
"English and Poor"))
grid.newpage()
draw.pairwise.venn(area1 = .146, area2 = .207, cross.area = .042, category = c("Foreign Language",
"English and Poor"),scaled=TRUE)
grid.newpage()
draw.pairwise.venn(area1 = .146, area2 = .207, cross.area = .042, category = c("English Poor",
"Foreign Language"),scaled=TRUE)
source("more/cdc.R")
source("more/arbuthnot.R")
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
5218 + 4683
arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
setwd('C:/Users/jkhan/Documents/GitHub/DATA-607-Data-Acquisition-and-Management/02_Week Two Assignment')
getwd()
setwd('C:/Users/jkhan/Documents/GitHub/DATA-607-Data-Acquisition-and-Management/02_Week Two Assignment/Presentation')
getwd()
install.packages("sqliter")
install.packages("RSQLite")
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
con = dbConnect(drv="SQLite", dbname="lahman2016.sqlite")
con = dbConnect(drv="SQLite", dbname='lahman2016.sqlite')
?dbConnect
library(RSQLite)
library(DBI)
con = dbConnect(drv="SQLite", dbname='lahman2016.sqlite')
library(RSQLite)
library(DBI)
# install.packages("devtools")
devtools::install_github("rstats-db/RSQLite")
con = dbConnect(RSQLite::SQLite(),'lahman2016.sqlite')
dbListTables(con)
dbReadTable(con, "Pitching")
dbReadTable(con, "Master")
dbReadTable(con, "Pitching")
dbListFields(con, "Master")
dbListFields(con, "Pitching")
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, Pitching.SO, Pitching.W
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, count(Pitching.SO), (Pitching.W)
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, count(Pitching.SO) AS 'Strikeouts', count(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, count(Pitching.SO) AS 'Strikeouts', count(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
Order BY count(Pitching.W) ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, count(Pitching.SO) AS 'Strikeouts', count(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
Order BY count(Pitching.W) desc ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, sum(Pitching.SO) AS 'Strikeouts', sum(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
Order BY sum(Pitching.W) desc ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, sum(Pitching.SO) AS 'Strikeouts', sum(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
Order BY sum(Pitching.W) desc, sum(Pitching.W) desc ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, sum(Pitching.SO) AS 'Strikeouts', sum(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
Order BY sum(Pitching.SO) desc, sum(Pitching.W) desc ")
pitchers
dbListTables(con)
dbReadTable(con, "Master")
dbListFields(con, "Master")
dbListFields(con, "Pitching")
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, sum(Pitching.SO) AS 'Strikeouts', sum(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
Order BY sum(Pitching.SO) desc, sum(Pitching.W) desc ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, sum(Pitching.SO) AS 'Strikeouts', sum(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
HAVING sum(Pitching.SO) > 3000
Order BY sum(Pitching.SO) desc, sum(Pitching.W) desc ")
pitchers
pitchers<- dbGetQuery(con, "SELECT Master.nameLast, Master.nameGiven, sum(Pitching.SO) AS 'Strikeouts', sum(Pitching.W) As 'Wins'
FROM Master
INNER JOIN Pitching ON Pitching.playerID = Master.playerID
GROUP BY Master.nameLast, Master.nameGiven
HAVING sum(Pitching.SO) >= 3000
Order BY sum(Pitching.SO) desc, sum(Pitching.W) desc ")
pitchers
